plugins {
    id 'com.android.application'
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlin-kapt"
    id "org.jetbrains.kotlin.plugin.serialization"
    id 'com.google.devtools.ksp'
    alias(libs.plugins.easyLauncher)
}

apply from: rootProject.file('scripts/versioning.gradle')
apply from: rootProject.file('scripts/read_properties.gradle')

if (getEnvVariable('KEYSTORE_FILE') != null) {
    // Avoid Signing not ready issues in Gradle Play Publisher plugin
    apply from: rootProject.file('scripts/snapshot_publish.gradle')
}

// TODO: Enable when the services json is added
// apply plugin: 'com.google.gms.google-services'

// TODO: Setup Crashlytics
def CRASHLYTICS_ENABLED = false


android {
    compileSdkVersion androidVersions.compileSdk
    buildToolsVersion androidVersions.buildTools

    defaultConfig {
        applicationId "com.xmartlabs.gong"
        minSdkVersion androidVersions.minSdk
        targetSdkVersion androidVersions.targetSdk
        versionCode 1
        versionName ""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        // Used to define some constants like the share preferences's file name.
        buildConfigField 'String', 'APP_NAME', '"Gong"'
        buildConfigField 'boolean', 'CRASHLYTICS_ENABLED', "$CRASHLYTICS_ENABLED"
    }

    buildFeatures {
        compose true
        buildConfig = true
    }

    signingConfigs {
        release {
            storeFile getEnvVariable('KEYSTORE_FILE') == null ? null : file(getEnvVariable('KEYSTORE_FILE'))
            storePassword getEnvVariable('KEYSTORE_PASSWORD')
            keyAlias getEnvVariable('KEYSTORE_KEY_ALIAS')
            keyPassword getEnvVariable('KEYSTORE_KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (getEnvVariable('KEYSTORE_FILE') != null) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            minifyEnabled getEnvVariable('MINIFY_CODE', false) as Boolean
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions = ["env"]
    productFlavors {
        dev {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_DEV_SERVER_URL')

            dimension "env"
            applicationIdSuffix '.dev'
        }
        prod {
            buildConfigField 'String', 'API_BASE_URL', getEnvVariable('API_PROD_SERVER_URL')

            dimension "env"
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE']
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        languageVersion = "1.9"
        jvmTarget = '17'
        freeCompilerArgs += [
                "-Xallow-result-return-type",
                "-opt-in=kotlin.RequiresOptIn",
                "-opt-in=kotlin.contracts.ExperimentalContracts",
        ]
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.14"
    }
    namespace 'com.xmartlabs.gong'
    lint {
        disable 'ObsoleteLintCustomCheck'
        disable 'AndroidGradlePluginVersion'
        fatal 'StopShip'
        lintConfig file('lint.xml')
        warningsAsErrors true
    }
}

dependencies {
    androidTestImplementation libs.bundles.androidXTest

    debugImplementation libs.leakcanary
    debugImplementation libs.bundles.networking.debug
    debugImplementation libs.bundles.flipper

    implementation libs.androidX.core.splashscreen
    implementation libs.androidX.room.core
    implementation libs.androidX.dataStore
    implementation libs.coil
    implementation libs.once
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    implementation libs.koin.compose
    implementation libs.timber
    implementation libs.store

    implementation libs.bundles.accompanist
    implementation libs.bundles.androidSwissKnife
    implementation libs.bundles.compose
    implementation libs.bundles.kotlin
    implementation libs.bundles.networking.core

    ksp libs.androidX.room.compiler

    testImplementation libs.junit
}
